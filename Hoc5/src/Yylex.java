/* The following code was generated by JFlex 1.4.3 on 6/11/18 11:41 AM */

/***** USER SUPPORT CODE *****/

/***** OPTIONS AND DECLARATIONS *****/

public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  2,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0,  0, 14,  0,  3,  0,  0,  3,  3,  3,  8,  3,  8,  0,  9, 
     6,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0,  3, 16, 13, 15,  0, 
     0, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  3,  0,  3,  3, 12, 
     0, 33, 32, 31, 34, 19, 18, 28, 23, 17, 11, 11, 20, 30, 26, 29, 
    24, 11, 25, 21, 27, 11, 35, 22, 10, 11, 11,  3,  7,  3,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\1\2\4\1\1\1\3"+
    "\1\5\1\3\1\1\1\6\1\7\11\5\6\0\1\10"+
    "\1\11\1\12\1\13\1\14\10\5\2\0\2\15\12\5"+
    "\1\16\1\17\6\5\1\20\1\21\11\5\1\22\3\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\44\0\44\0\154\0\220\0\264"+
    "\0\330\0\330\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0"+
    "\0\u01d4\0\u01f8\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0"+
    "\0\u02f4\0\264\0\330\0\u0318\0\u033c\0\u0360\0\44\0\44"+
    "\0\44\0\44\0\374\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414"+
    "\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534"+
    "\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654"+
    "\0\u0678\0\374\0\374\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c"+
    "\0\u0750\0\374\0\374\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804"+
    "\0\u0828\0\u084c\0\u0870\0\u0894\0\374\0\u08b8\0\u08dc\0\u0900";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\5\2\13\1\2\1\14\1\15\1\16\1\17"+
    "\1\20\1\13\1\21\2\13\1\22\1\13\1\23\1\13"+
    "\1\24\1\13\1\25\2\13\1\26\1\27\1\13\1\30"+
    "\1\13\46\0\1\4\45\0\1\6\1\31\1\32\2\33"+
    "\37\0\1\32\2\7\2\0\1\34\1\35\35\0\1\32"+
    "\4\0\1\34\1\35\35\0\1\36\1\31\1\32\2\33"+
    "\40\0\2\13\3\0\3\13\4\0\23\13\15\0\1\37"+
    "\43\0\1\40\43\0\1\41\43\0\1\42\33\0\2\13"+
    "\3\0\3\13\4\0\1\13\1\43\7\13\1\44\11\13"+
    "\5\0\2\13\3\0\3\13\4\0\3\13\1\45\17\13"+
    "\5\0\2\13\3\0\3\13\4\0\6\13\1\46\14\13"+
    "\5\0\2\13\3\0\3\13\4\0\10\13\1\47\12\13"+
    "\5\0\2\13\3\0\3\13\4\0\17\13\1\27\3\13"+
    "\5\0\2\13\3\0\3\13\4\0\2\13\1\50\20\13"+
    "\5\0\2\13\3\0\3\13\4\0\14\13\1\51\6\13"+
    "\5\0\2\13\3\0\3\13\4\0\1\52\22\13\5\0"+
    "\2\13\3\0\3\13\4\0\2\13\1\53\20\13\4\0"+
    "\1\32\2\31\2\0\1\34\1\35\36\0\1\54\1\0"+
    "\2\34\37\0\1\55\1\56\1\57\2\35\37\0\1\36"+
    "\1\31\1\32\42\0\2\13\3\0\3\13\4\0\12\13"+
    "\1\60\10\13\5\0\2\13\3\0\3\13\4\0\1\61"+
    "\3\13\1\62\16\13\5\0\2\13\3\0\3\13\4\0"+
    "\1\63\22\13\5\0\2\13\3\0\3\13\4\0\1\64"+
    "\22\13\5\0\2\13\3\0\3\13\4\0\14\13\1\65"+
    "\6\13\5\0\2\13\3\0\3\13\4\0\2\13\1\66"+
    "\20\13\5\0\2\13\3\0\3\13\4\0\11\13\1\67"+
    "\11\13\5\0\2\13\3\0\3\13\4\0\10\13\1\70"+
    "\12\13\5\0\2\54\2\0\1\34\1\35\35\0\1\55"+
    "\1\56\1\57\41\0\1\57\2\56\41\0\1\57\44\0"+
    "\2\13\3\0\3\13\4\0\2\13\1\71\20\13\5\0"+
    "\2\13\3\0\3\13\4\0\1\13\1\72\21\13\5\0"+
    "\2\13\3\0\3\13\4\0\2\13\1\73\20\13\5\0"+
    "\2\13\3\0\3\13\4\0\3\13\1\74\17\13\5\0"+
    "\2\13\3\0\3\13\4\0\11\13\1\75\11\13\5\0"+
    "\2\13\3\0\3\13\4\0\15\13\1\76\5\13\5\0"+
    "\2\13\3\0\3\13\4\0\1\13\1\24\21\13\5\0"+
    "\2\13\3\0\3\13\4\0\14\13\1\77\6\13\5\0"+
    "\2\13\3\0\3\13\4\0\1\100\22\13\5\0\2\13"+
    "\3\0\3\13\4\0\13\13\1\101\7\13\5\0\2\13"+
    "\3\0\3\13\4\0\2\13\1\102\20\13\5\0\2\13"+
    "\3\0\3\13\4\0\12\13\1\103\10\13\5\0\2\13"+
    "\3\0\3\13\4\0\2\13\1\104\20\13\5\0\2\13"+
    "\3\0\3\13\4\0\15\13\1\105\5\13\5\0\2\13"+
    "\3\0\3\13\4\0\22\13\1\106\5\0\2\13\3\0"+
    "\3\13\4\0\10\13\1\107\12\13\5\0\2\13\3\0"+
    "\3\13\4\0\12\13\1\110\10\13\5\0\2\13\3\0"+
    "\3\13\4\0\1\107\22\13\5\0\2\13\3\0\3\13"+
    "\4\0\20\13\1\111\2\13\5\0\2\13\3\0\3\13"+
    "\4\0\20\13\1\112\2\13\5\0\2\13\3\0\3\13"+
    "\4\0\10\13\1\113\12\13\5\0\2\13\3\0\3\13"+
    "\4\0\12\13\1\114\10\13\5\0\2\13\3\0\3\13"+
    "\4\0\3\13\1\115\17\13\5\0\2\13\3\0\3\13"+
    "\4\0\1\116\22\13\5\0\2\13\3\0\3\13\4\0"+
    "\1\117\22\13\5\0\2\13\3\0\3\13\4\0\16\13"+
    "\1\115\4\13\5\0\2\13\3\0\3\13\4\0\22\13"+
    "\1\120\5\0\2\13\3\0\3\13\4\0\2\13\1\115"+
    "\20\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\23\1\6\0\4\11\11\1"+
    "\2\0\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[80];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /* Store a reference to the parser object */
  private Parser yyparser;

  /* Constructor taking an additional parser object */
  public Yylex(java.io.Reader r, Parser yyparser){
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { System.out.println("Lexer: Lesser conditional detected: " + yytext());
  return Parser.LT;
          }
        case 19: break;
        case 17: 
          { System.out.println("Lexer: Print command detected: " + yytext());
  return Parser.PRINT;
          }
        case 20: break;
        case 5: 
          { yyparser.yylval = new ParserVal(new InputText(yytext()));
  System.out.println("Lexer: Variable detected: " + yytext());
  return Parser.VAR;
          }
        case 21: break;
        case 14: 
          { System.out.println("Lexer: Elif condition detected: " + yytext());
  return Parser.ELIF;
          }
        case 22: break;
        case 1: 
          { /* Do nothing */
          }
        case 23: break;
        case 9: 
          { System.out.println("Lexer: Distinct conditional detected: " + yytext());
  return Parser.NEQ;
          }
        case 24: break;
        case 10: 
          { System.out.println("Lexer: Greater or Equal conditional detected: " + yytext());
  return Parser.GE;
          }
        case 25: break;
        case 11: 
          { System.out.println("Lexer: Lesser or Equal conditional detected: " + yytext());
  return Parser.LE;
          }
        case 26: break;
        case 18: 
          { yyparser.yylval = new ParserVal(new InputText(yytext()));
  System.out.println("Lexer: Built-in detected: " + yytext());
  return Parser.BLTIN;
          }
        case 27: break;
        case 12: 
          { System.out.println("Lexer: If condition detected: " + yytext());
  return Parser.IF;
          }
        case 28: break;
        case 13: 
          { System.out.println("Lexer: Term detected: " + yytext());
  Auxiliar aux = new Auxiliar(yytext());
  yyparser.yylval = new ParserVal(new Term(aux.getNumerator(), aux.getDenominator(), aux.getCoefficient()));
  return Parser.TERM;
          }
        case 29: break;
        case 15: 
          { System.out.println("Lexer: Else condition detected: " + yytext());
  return Parser.ELSE;
          }
        case 30: break;
        case 6: 
          { System.out.println("Lexer: Greater than conditional detected: " + yytext());
  return Parser.GT;
          }
        case 31: break;
        case 4: 
          { System.out.println("Lexer: Number detected: " + yytext());
  yyparser.yylval = new ParserVal(new InputText(yytext()));
  return Parser.NUM;
          }
        case 32: break;
        case 3: 
          { System.out.println("Lexer: Comma-Operator-Key detected: " + yycharat(0));
  return (int) yycharat(0); //Since they are single chars defined in ascii values, we just return the integer value
          }
        case 33: break;
        case 16: 
          { System.out.println("Lexer: While condition detected: " + yytext());
  return Parser.WHILE;
          }
        case 34: break;
        case 8: 
          { System.out.println("Lexer: Equal conditional detected: " + yytext());
  return Parser.EQ;
          }
        case 35: break;
        case 2: 
          { System.out.println("Lexer: End of line detected: " + yytext());
  return (int) yycharat(0); //Since they are single chars defined in ascii values, we just return the integer value
          }
        case 36: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
